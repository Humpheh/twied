=== IMPLEMENTATION ===

-- Requirements ---
Python 3+

Incomplete list of packages used, some may not be needed if you are not running every script:
- pymongo
- twython
- numpy
- urllib3
- Pillow
- Polygon3
- matplotlib
- basemap
- networkx

This folder contains the implementation of the Spatial Label Propagation (SLP), Multi-Indicator (MI) Approach and 
Event Detection (ED) algorithms. 

--- SLP --- 
  /labelprop/
      - folder is a package containing the inference class in inference.yp
      - /distance.py contains implementation of the geometric median (function has the wrong name)

  /slp_demo.py
      - contains example usage of the SLP algorithm
      - plots the result as a graph

  /slp_test.py
      - contains code for inferring multiple tweets in a MongoDB

--- MI ---
  /multiind/
      - folder is a package containing the implementation of the MI algorithm
      - /inference.py contains a class for setup up a inference process which can be fed tweets
      - /polystacker.py contains functions for stacking the polygons and inferring a single poly
      - /indicators/ contains files for each implemented indicator
      - /interfaces/ contains files for interfaces with web services and the polygon DB

  /mi_allocate.py
      - script used to allocate each tweet with a number between 0 and X

  /mi_proc.py
      - the MI proccess

  /mi_demo.py
      - demo of the MI approach which plots graphs when inferring

--- ED ---
  /eventec/
      - folder is a package containing the implementation of the event detection
      - cluster modues held in this class
      - /popcount.py contains interface with the population map
      - /eventdetection.py is entry point for the event detection

  /ed_load.py
      - example of loading PKL files generated by the ed_proc

  /ed_proc.py
      - event detection process
      - /ed_proc_real.py and /ed_proc_uk.py are alternative versions for tests in project

  /ed_poly.py
      - outputs an animation of the events over time?

  /ed_test.py
      - testing class

--- OTHER ---
  /polyani.py
      - contains test functions for animating the tweets/events

  /polyplotter.py 
      - contains functions to plot polygons and points on a map

  /logs/
      - folder containing the log files from the output

  /settings/
      - folder contains settings.ini file and example settings.ini file

  /twieds/
      - (TWIter Event Detection System)
      - package which contains some helper functions such as log/config setups

  /dbfillers/
      - random functions used when filling databases